import java.util.*;

public class _05JavaKeywordsDisplay {
    
    // Java keywords data
    private static final Map<String, KeywordInfo> KEYWORDS = new LinkedHashMap<>();
    
    static {
        // Initialize all Java keywords with descriptions and examples
        KEYWORDS.put("abstract", new KeywordInfo(
            "Used to declare abstract classes and methods",
            "abstract class Animal { abstract void makeSound(); }"
        ));
        
        KEYWORDS.put("assert", new KeywordInfo(
            "Used for debugging to test assumptions in code",
            "assert x > 0 : \"x must be positive\";"
        ));
        
        KEYWORDS.put("boolean", new KeywordInfo(
            "Data type that can only be true or false",
            "boolean isActive = true;"
        ));
        
        KEYWORDS.put("break", new KeywordInfo(
            "Used to exit loops or switch statements",
            "while(true) { if(condition) break; }"
        ));
        
        KEYWORDS.put("byte", new KeywordInfo(
            "8-bit integer data type (-128 to 127)",
            "byte smallNumber = 100;"
        ));
        
        KEYWORDS.put("case", new KeywordInfo(
            "Used in switch statements to define cases",
            "switch(x) { case 1: break; case 2: break; }"
        ));
        
        KEYWORDS.put("catch", new KeywordInfo(
            "Catches exceptions generated by try blocks",
            "try { riskyCode(); } catch(Exception e) { handleError(); }"
        ));
        
        KEYWORDS.put("char", new KeywordInfo(
            "16-bit Unicode character data type",
            "char letter = 'A';"
        ));
        
        KEYWORDS.put("class", new KeywordInfo(
            "Used to declare a class",
            "class MyClass { // class body }"
        ));
        
        KEYWORDS.put("const", new KeywordInfo(
            "Reserved keyword (not used in Java)",
            "// Not used in Java - use 'final' instead"
        ));
        
        KEYWORDS.put("continue", new KeywordInfo(
            "Skips the current iteration of a loop",
            "for(int i=0; i<10; i++) { if(i==5) continue; System.out.println(i); }"
        ));
        
        KEYWORDS.put("default", new KeywordInfo(
            "Default case in switch statements or default methods in interfaces",
            "switch(x) { case 1: break; default: break; }"
        ));
        
        KEYWORDS.put("do", new KeywordInfo(
            "Starts a do-while loop",
            "do { code(); } while(condition);"
        ));
        
        KEYWORDS.put("double", new KeywordInfo(
            "64-bit floating-point data type",
            "double price = 19.99;"
        ));
        
        KEYWORDS.put("else", new KeywordInfo(
            "Alternative branch for if statements",
            "if(x>0) { positive(); } else { nonPositive(); }"
        ));
        
        KEYWORDS.put("enum", new KeywordInfo(
            "Used to define a set of named constants",
            "enum Color { RED, GREEN, BLUE }"
        ));
        
        KEYWORDS.put("extends", new KeywordInfo(
            "Indicates inheritance between classes",
            "class Dog extends Animal { }"
        ));
        
        KEYWORDS.put("final", new KeywordInfo(
            "Makes variables constant, methods non-overridable, classes non-inheritable",
            "final double PI = 3.14159;"
        ));
        
        KEYWORDS.put("finally", new KeywordInfo(
            "Block that always executes after try-catch",
            "try { code(); } catch(Exception e) { } finally { cleanup(); }"
        ));
        
        KEYWORDS.put("float", new KeywordInfo(
            "32-bit floating-point data type",
            "float temperature = 98.6f;"
        ));
        
        KEYWORDS.put("for", new KeywordInfo(
            "Loop that repeats a block of code",
            "for(int i=0; i<10; i++) { System.out.println(i); }"
        ));
        
        KEYWORDS.put("goto", new KeywordInfo(
            "Reserved keyword (not used in Java)",
            "// Not used in Java"
        ));
        
        KEYWORDS.put("if", new KeywordInfo(
            "Conditional statement",
            "if(condition) { executeCode(); }"
        ));
        
        KEYWORDS.put("implements", new KeywordInfo(
            "Used to implement interfaces",
            "class MyClass implements MyInterface { }"
        ));
        
        KEYWORDS.put("import", new KeywordInfo(
            "Imports packages and classes",
            "import java.util.ArrayList;"
        ));
        
        KEYWORDS.put("instanceof", new KeywordInfo(
            "Tests if an object is an instance of a class",
            "if(obj instanceof String) { String str = (String)obj; }"
        ));
        
        KEYWORDS.put("int", new KeywordInfo(
            "32-bit integer data type",
            "int count = 42;"
        ));
        
        KEYWORDS.put("interface", new KeywordInfo(
            "Used to declare an interface",
            "interface Drawable { void draw(); }"
        ));
        
        KEYWORDS.put("long", new KeywordInfo(
            "64-bit integer data type",
            "long bigNumber = 123456789L;"
        ));
        
        KEYWORDS.put("native", new KeywordInfo(
            "Indicates a method implemented in native code",
            "native void nativeMethod();"
        ));
        
        KEYWORDS.put("new", new KeywordInfo(
            "Creates new objects",
            "String str = new String(\"Hello\");"
        ));
        
        KEYWORDS.put("package", new KeywordInfo(
            "Declares a package",
            "package com.example.myapp;"
        ));
        
        KEYWORDS.put("private", new KeywordInfo(
            "Access modifier - accessible only within its class",
            "private int secretNumber;"
        ));
        
        KEYWORDS.put("protected", new KeywordInfo(
            "Access modifier - accessible within package and subclasses",
            "protected void familyMethod() { }"
        ));
        
        KEYWORDS.put("public", new KeywordInfo(
            "Access modifier - accessible from anywhere",
            "public static void main(String[] args) { }"
        ));
        
        KEYWORDS.put("return", new KeywordInfo(
            "Returns a value from a method",
            "public int getValue() { return 42; }"
        ));
        
        KEYWORDS.put("short", new KeywordInfo(
            "16-bit integer data type (-32768 to 32767)",
            "short smallInt = 1000;"
        ));
        
        KEYWORDS.put("static", new KeywordInfo(
            "Belongs to the class rather than instances",
            "static int count = 0;"
        ));
        
        KEYWORDS.put("strictfp", new KeywordInfo(
            "Ensures floating-point calculations are platform-independent",
            "strictfp class Calculator { }"
        ));
        
        KEYWORDS.put("super", new KeywordInfo(
            "Refers to parent class methods/constructors",
            "super(); // calls parent constructor"
        ));
        
        KEYWORDS.put("switch", new KeywordInfo(
            "Multi-way branch statement",
            "switch(day) { case MONDAY: break; case TUESDAY: break; }"
        ));
        
        KEYWORDS.put("synchronized", new KeywordInfo(
            "Provides thread synchronization",
            "synchronized void safeMethod() { }"
        ));
        
        KEYWORDS.put("this", new KeywordInfo(
            "Refers to current object instance",
            "this.name = name;"
        ));
        
        KEYWORDS.put("throw", new KeywordInfo(
            "Throws an exception explicitly",
            "throw new IllegalArgumentException(\"Invalid input\");"
        ));
        
        KEYWORDS.put("throws", new KeywordInfo(
            "Declares exceptions a method might throw",
            "void riskyMethod() throws IOException { }"
        ));
        
        KEYWORDS.put("transient", new KeywordInfo(
            "Prevents fields from being serialized",
            "transient String tempData;"
        ));
        
        KEYWORDS.put("try", new KeywordInfo(
            "Starts a block of exception-handling code",
            "try { riskyOperation(); } catch(Exception e) { }"
        ));
        
        KEYWORDS.put("void", new KeywordInfo(
            "Indicates a method returns no value",
            "public void doSomething() { }"
        ));
        
        KEYWORDS.put("volatile", new KeywordInfo(
            "Ensures variable visibility across threads",
            "volatile boolean running = true;"
        ));
        
        KEYWORDS.put("while", new KeywordInfo(
            "Loop that repeats while condition is true",
            "while(condition) { executeCode(); }"
        ));
        
        // Java 10+ keywords
        KEYWORDS.put("var", new KeywordInfo(
            "Local variable type inference (Java 10+)",
            "var list = new ArrayList<String>();"
        ));
        
        KEYWORDS.put("yield", new KeywordInfo(
            "Returns a value from switch expression (Java 14+)",
            "int result = switch(day) { case MONDAY -> yield 1; default -> yield 0; };"
        ));
        
        // Contextual keywords (not reserved but have special meaning)
        KEYWORDS.put("record", new KeywordInfo(
            "Declares a record class (Java 16+)",
            "record Point(int x, int y) { }"
        ));
        
        KEYWORDS.put("sealed", new KeywordInfo(
            "Controls inheritance hierarchy (Java 17+)",
            "sealed class Shape permits Circle, Square { }"
        ));
        
        KEYWORDS.put("non-sealed", new KeywordInfo(
            "Makes a sealed class hierarchy open (Java 17+)",
            "non-sealed class Circle extends Shape { }"
        ));
        
        KEYWORDS.put("permits", new KeywordInfo(
            "Specifies allowed subclasses (Java 17+)",
            "sealed class Shape permits Circle, Square { }"
        ));
    }
    
    static class KeywordInfo {
        String description;
        String example;
        
        KeywordInfo(String description, String example) {
            this.description = description;
            this.example = example;
        }
    }
    
    public static void main(String[] args) {
        displayKeywordsTable();
        System.out.println("\n" + "=".repeat(100));
        displayKeywordsByCategory();
        System.out.println("\n" + "=".repeat(100));
        displayKeywordStatistics();
    }
    
    public static void displayKeywordsTable() {
        System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════════════════╗");
        System.out.println("║                                      JAVA KEYWORDS REFERENCE                                         ║");
        System.out.println("╚══════════════════════════════════════════════════════════════════════════════════════════════════════╝");
        System.out.println();
        
        System.out.println("┌───────────────┬────────────────────────────────────────────────┬────────────────────────────────────┐");
        System.out.println("│ Keyword       │ Description                                    │ Example                            │");
        System.out.println("├───────────────┼────────────────────────────────────────────────┼────────────────────────────────────┤");
        
        KEYWORDS.forEach((keyword, info) -> {
            String desc = truncate(info.description, 40);
            String example = truncate(info.example, 30);
            System.out.printf("│ %-13s │ %-46s │ %-34s │%n", keyword, desc, example);
        });
        
        System.out.println("└───────────────┴────────────────────────────────────────────────┴────────────────────────────────────┘");
    }
    
    public static void displayKeywordsByCategory() {
        System.out.println("📊 JAVA KEYWORDS BY CATEGORY");
        System.out.println();
        
        // Categorize keywords
        Map<String, List<String>> categories = new LinkedHashMap<>();
        categories.put("Access Modifiers", Arrays.asList("public", "private", "protected"));
        categories.put("Non-Access Modifiers", Arrays.asList("static", "final", "abstract", "synchronized", "volatile", "transient", "native", "strictfp"));
        categories.put("Primitive Data Types", Arrays.asList("byte", "short", "int", "long", "float", "double", "char", "boolean"));
        categories.put("Flow Control", Arrays.asList("if", "else", "switch", "case", "default", "while", "do", "for", "break", "continue", "return"));
        categories.put("Exception Handling", Arrays.asList("try", "catch", "finally", "throw", "throws"));
        categories.put("Class & Object Related", Arrays.asList("class", "interface", "enum", "extends", "implements", "new", "this", "super", "instanceof"));
        categories.put("Package Related", Arrays.asList("package", "import"));
        categories.put("Reserved (Unused)", Arrays.asList("goto", "const"));
        categories.put("Java 10+ Features", Arrays.asList("var"));
        categories.put("Java 14+ Features", Arrays.asList("yield"));
        categories.put("Java 16+ Features", Arrays.asList("record"));
        categories.put("Java 17+ Features", Arrays.asList("sealed", "permits", "non-sealed"));
        
        categories.forEach((category, keywords) -> {
            System.out.println("📁 " + category + ":");
            List<String> validKeywords = new ArrayList<>();
            for (String keyword : keywords) {
                if (KEYWORDS.containsKey(keyword)) {
                    validKeywords.add(keyword);
                }
            }
            
            if (!validKeywords.isEmpty()) {
                System.out.println("   " + String.join(", ", validKeywords));
                System.out.println();
            }
        });
    }
    
    public static void displayKeywordStatistics() {
        System.out.println("📈 KEYWORD STATISTICS");
        System.out.println();
        
        int totalKeywords = KEYWORDS.size();
        int reservedUnused = (KEYWORDS.containsKey("goto") ? 1 : 0) + (KEYWORDS.containsKey("const") ? 1 : 0);
        int java10Plus = countKeywordsByVersion(10);
        int java14Plus = countKeywordsByVersion(14);
        int java16Plus = countKeywordsByVersion(16);
        int java17Plus = countKeywordsByVersion(17);
        
        System.out.printf("Total Keywords: %d%n", totalKeywords);
        System.out.printf("Reserved but unused: %d (goto, const)%n", reservedUnused);
        System.out.printf("Java 10+ keywords: %d%n", java10Plus);
        System.out.printf("Java 14+ keywords: %d%n", java14Plus);
        System.out.printf("Java 16+ keywords: %d%n", java16Plus);
        System.out.printf("Java 17+ keywords: %d%n", java17Plus);
        
        // Display most common first letters
        Map<Character, Integer> firstLetterCount = new HashMap<>();
        for (String keyword : KEYWORDS.keySet()) {
            char firstChar = keyword.charAt(0);
            firstLetterCount.put(firstChar, firstLetterCount.getOrDefault(firstChar, 0) + 1);
        }
        
        System.out.println("\n📊 Distribution by first letter:");
        firstLetterCount.entrySet().stream()
            .sorted(Map.Entry.<Character, Integer>comparingByValue().reversed())
            .forEach(entry -> System.out.printf("   '%c': %d keywords%n", entry.getKey(), entry.getValue()));
    }
    
    private static int countKeywordsByVersion(int version) {
        Set<String> versionKeywords = new HashSet<>();
        switch (version) {
            case 10: versionKeywords.addAll(Arrays.asList("var")); break;
            case 14: versionKeywords.addAll(Arrays.asList("yield")); break;
            case 16: versionKeywords.addAll(Arrays.asList("record")); break;
            case 17: versionKeywords.addAll(Arrays.asList("sealed", "permits", "non-sealed")); break;
        }
        
        return (int) versionKeywords.stream().filter(KEYWORDS::containsKey).count();
    }
    
    private static String truncate(String text, int maxLength) {
        if (text.length() <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength - 3) + "...";
    }
}